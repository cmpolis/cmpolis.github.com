<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ByteMuse]]></title>
  <link href="http://cmpolis.github.com/atom.xml" rel="self"/>
  <link href="http://cmpolis.github.com/"/>
  <updated>2013-01-13T15:52:53-08:00</updated>
  <id>http://cmpolis.github.com/</id>
  <author>
    <name><![CDATA[Chris Polis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Terminal Crash Course and Reference Sheet]]></title>
    <link href="http://cmpolis.github.compost/the-terminal-crash-course-and-reference-sheet/"/>
    <updated>2013-01-13T14:30:00-08:00</updated>
    <id>http://cmpolis.github.compost/the-terminal-crash-course-and-reference-sheet</id>
    <content type="html"><![CDATA[<p>I have been using linux for five or six years and I&#8217;m wrapping up my last year of college. I noticed that a lot of first year students and people starting to use linux have trouble getting around the terminal. Most of the time I&#8217;m only using a handful of commands and operations. I thought it might be helpful to share some basic usage of these commands and other tricks, so I wrote a short guide and reference sheet that I wish someone had given me when I started using linux: <em>I&#8217;m using Ubuntu and Bash 4.2.8, YMMV</em></p>

<h2>Basics</h2>

<h3>Directories:</h3>

<p><code>.</code> Current directory</p>

<p><code>..</code> Parent directory</p>

<p><code>-</code> Directory that you were at last
<em>ex:</em></p>

<pre><code>$ cd ~/Downloads
$ cd ~/Documents
$ cd -
[now you are back in Downloads]
</code></pre>

<p><code>~</code> Home directory, contains personal files, <em>equivalent to <code>/home/[your username]/</code></em></p>

<p><code>/</code> Root directory, the parent directory for all files</p>

<h3>Commands</h3>

<h4>Navigation</h4>

<p><code>cd</code> Choose Directory - move to a given directory <br />
<em>ex:</em> <code>$ cd ~/Desktop</code></p>

<p><code>ls</code> List files in the current directory <br />
<em>Options: <br />
<code>-a</code> list all files (some files are hidden otherwise) <br />
<code>-l</code> list files with metadata like permissions, timestamp and size</em></p>

<p><code>pwd</code> Prints the absolute path of the directory thta you are in</p>

<p><code>mkdir [new dir name]</code> Creates a new directory with a relative or absolute path<br />
<em>ex:</em></p>

<pre><code>$ mkdir newDirA # creates a directory as a child of the current directory
$ mkdir ~/Desktop/newDirB # creates a new directory on the desktop
</code></pre>

<h4>System Management</h4>

<p><code>ps</code> Lists processes, <code>ps aux</code> prints all processes that the current user can see and should be used in most cases</p>

<p><code>top</code> Shows system(CPU, mem, processes) status dynamically. Hit <code>q</code> key to exit.</p>

<p><code>kill</code> Sends a signal to a process, usually to terminate it. Takes in a pid(can be obtained from <code>ps</code>) as an argument.</p>

<p><code>free</code> Lists memory usage stats <code>-m</code> displays numbers in Mb and can be easier to read</p>

<p><code>df</code> Lists hard disk usage stats (also takes <code>-m</code> option)</p>

<h4>Files</h4>

<p><code>cat</code> Print out a file in the terminal</p>

<p><code>rm</code> Removes a file<br />
<em>Options: <br />
<code>-r</code> Recursivly remove files (use for directories)<br />
<code>-f</code> Force removing files, ie the user isn&#8217;t prompted and a warning isnt given if the file does not exist<br />
BE CAREFUL WITH RM, especially -with <code>-r</code> and <code>-f</code>!</em></p>

<p><code>mv [file] [destination]</code> Moves a file</p>

<p><code>cp [file] [destination]</code> Copies a file</p>

<p><code>ln</code> Make a link(alias) to a file - you can open/read/edit the file using the link <br />
<em>ex:</em> <code>$ ln ~/Downloads/someFile</code> creates a link to this file in the current directory.</p>

<p><code>chmod [permission] [file]</code> Change file permissions/mode. <a href="http://en.wikipedia.org/wiki/Chmod">More info</a><br />
<em>There are many different possible permissions, here are some useful ones:</em><br /></p>

<pre><code>chmod 777 [file] # All users can read/write/execute
chmod 755 [file] # All can read and execute, only owner can write
chmod a+x [file] # Make a file executable
</code></pre>

<p><code>tail</code> Prints the last 10 or <code>-#</code> # of lines of a file</p>

<p><code>head</code> Prints the first 10 or <code>-#</code> # of lines of a file</p>

<p><code>diff</code> Show differences between two files <br />
<em>ex:</em></p>

<pre><code>$ cat a
foo bar
$ cat b
foo
$ diff a b
1c1
&lt; foo bar
---
&gt; foo
</code></pre>

<p><code>emacs/vim/nano</code> Text editors. I personally like VIM, but everyone has their preference and VIM has a decent learning curve.</p>

<h4>Misc</h4>

<p><code>man [command name]</code> <strong>IMPORTANT</strong> Shows the manual page for a given command</p>

<p><code>grep [pattern] [filename]</code> Searches a file for a regex or text pattern</p>

<p><code>time [command]</code> Runs a command and displays the time it takes to execute</p>

<p><code>history</code> Prints previously run commands</p>

<p><code>wget [URL]</code> Downloads the file at the given URL</p>

<h2>Complicating Things&#8230;</h2>

<h4>Shortcuts</h4>

<p><code>up/down arrow keys</code> Toggle through previously run terminal commands</p>

<p><code>ctrl+c</code> Attempts to shutdown the process that is running in the terminal (sends a SIGINT)</p>

<p><code>ctrl+z</code> Kills the process that is running in the terminal, similar to <code>ctrl+c</code>, but more intrusive and will always work(sends a SIGSTOP)</p>

<p><code>tab</code> Autocompletes a file or command name in the terminal. Will only fully autocomplete if there is one option or will complete partially if all possibilities share part of their name. <br />
<em>ex: <code>$ cd ~/Down [hit tab]</code> -> <code>$ cd/Downloads</code></em></p>

<p><code>hit tab twice</code> Shows options to finish command or filename<br />
<em>ex:</em></p>

<pre><code>$ cd  ~/D [hit tab twice]
Desktop/   Documents/ Downloads/ Dropbox/ 
$ cd ~/D 
</code></pre>

<h4>Combining terminal commands</h4>

<p><code>[command one] &amp;&amp; [command two]</code> Run command one, then run command two<br />
<em>ex: <code>mkdir newDir &amp;&amp; cd newDir</code> to make a directory and navigate into it</em></p>

<p><code>[command one] | [command two]</code> Pipe: Use the output from command one as input for command two<br />
<em>ex: <code>history | grep git</code> to search history for when git commands were run</em></p>

<h4>Redirection</h4>

<p><code>[command] &gt; [file]</code> Redirect out: Instead of printing to the terminal, put the output in a file</p>

<p><code>[command] &lt; [file]</code> Redirect in: Get input from a file instead of the terminal</p>

<h4>Bang!</h4>

<p><code>!!</code> Run the last command that was executed</p>

<p><code>!#</code> Runs the command with a given line # that can be found from <code>history</code><br />
<em>ex:</em></p>

<pre><code>$ history | grep git
1735  git status
1736  git add .
$ !1735  # Runs 'git status'
</code></pre>

<p><code>![pattern]</code> Run the last command you executed that started with &#8216;pattern&#8217;</p>

<p><em>I hope this helps!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolutions and Search Trends]]></title>
    <link href="http://cmpolis.github.compost/resolutions-and-search-trends/"/>
    <updated>2013-01-01T15:26:00-08:00</updated>
    <id>http://cmpolis.github.compost/resolutions-and-search-trends</id>
    <content type="html"><![CDATA[<p>Every new year, people make resolutions to better themselves. It&#8217;s great that people use the holiday as a catalyst, but it seems like most resolutions are not very long lived, <em>e.g. the gym is always more crowded in Jan than June.</em></p>

<p>I thought it would be interesting to see this phenomenon in a less anecdotal light. I started messing with <a href="http://www.google.com/trends/">Google Trends</a> and found the data to be as I suspected: huge spikes for most <em>new-years-resolutiony</em> terms. It was also interesting to see how similar the trends were for some terms were year over year.</p>

<p>I also compared the search traffic for each term in January with the year round search traffic for that term. The term that I found with the largest <em>Jan vs rest of year</em> average traffic difference was <strong>&#8216;get organized&#8217;</strong> with 1.52 times more search traffic in January.</p>

<p>I graphed the search trends of some <em>new-years-resolutiony</em> terms with <a href="http://d3js.org/">d3.js</a>:</p>

<p><em>Mouseover a label to highlight a specific term</em></p>

<div id="labels"></div>


<div id="graph"></div>


<p><small>
<a href="https://docs.google.com/spreadsheet/pub?key=0AjB3CQ60Cfb4dHFhVGtXRmV0anB6R1o1TURJYTM2RlE&amp;output=html">Raw data</a>, collected via <a href="http://www.google.com/trends/">Google Trends</a>.
</small></p>

<p><em>All the best in 2013!</em></p>

<script src="http://d3js.org/d3.v3.js"></script>


<script>
var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 720 - margin.left;// - margin.right,
    height = 500 - margin.top - margin.bottom;

var parseDate = d3.time.format("%x").parse;

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis()
    .scale(x)
    .ticks(d3.time.years, 1)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var line = d3.svg.line()
    .interpolate("basis")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });

var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.csv("/resolution_graph_data.csv", function(error, data) {
  color.domain(d3.keys(data[0]).filter(function(key) { return key !== "Week"; }));

  data.forEach(function(d) {
    d.date = parseDate(d.Week);
  });

  window.cities = color.domain().map(function(name, ndx) {
    return {
      name: name,
      values: data.map(function(d) {
        return {date: d.date, temperature: +d[name]};
      }),
      color: color(ndx)
    };
  });

  x.domain(d3.extent(data, function(d) { return d.date; }));

  y.domain([
    d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.temperature; }); }),
    d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.temperature; }); })
  ]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis.tickSize(-height,0,0));

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
   // .append("text")
   //   .attr("transform", "rotate(-90)")
   //   .attr("y", 6)
   //   .attr("dy", ".71em")
   //   .style("text-anchor", "end")
   //   .text("Temperature (ºF)");

  var city = svg.selectAll(".city")
      .data(cities)
    .enter().append("g")
      .attr("class", "city");

  city.append("path")
      .attr("class", "line")
      .attr("id", function(d) { return d.name.replace(/\s/g,''); })
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  //city.append("text")
  //    .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
  //    .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
  //    .attr("x", 3)
  //    .attr("dy", ".35em")
  //    .text(function(d) { return d.name; });
var labels = d3.select("#labels").append('ul')
             .selectAll('li').data(cities).enter()
             .append('li')
             .attr('class', 'color-label')
             .text(function(d) { return d.name; })
             .style('color', function(d) { return d.color; })
             .on('mouseover', function(d) { 
               d3.select('#'+d.name.replace(/\s/g,''))
                 .style('stroke-opacity', '1');
             })
             .on('mouseout', function(d) { 
               d3.select('#'+d.name.replace(/\s/g,''))
                 .style('stroke-opacity', '.15');
             });
              
});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Obligatory First Post]]></title>
    <link href="http://cmpolis.github.compost/obligatory-first-post/"/>
    <updated>2012-12-30T22:09:00-08:00</updated>
    <id>http://cmpolis.github.compost/obligatory-first-post</id>
    <content type="html"><![CDATA[<p>After a hiatus of about a year, I&#8217;ve decided to blog again! I&#8217;m not one for making resolutions, but in 2013 and beyond, I plan to write more and do more open source coding. I blogged previously on ByteMuse.com and had a handful of posts, but I&#8217;m hoping to start posting more regularly.</p>

<p>Some topics that I want to cover are:</p>

<ul>
<li>Open Source</li>
<li>Web Development</li>
<li>Mobile Development</li>
<li>Databases</li>
<li>Travel</li>
<li>Books, Music, Movies</li>
</ul>


<h3>Old Posts</h3>

<p>I&#8217;ve decided not to migrate my old posts for various reasons. Many of these posts are complemented with code that is still available on my <a href="http://github.com/cmpolis">GitHub Account</a>.</p>

<h3>Setup</h3>

<p><em>If you&#8217;re into web development, you might find this interesting&#8230;</em></p>

<p>I previously ran my blog with WordPress and hated it: the templating and plugin system are really heavy, it favors editing and customization through UI instead of code&#8230; and it&#8217;s written in PHP.</p>

<p>My new blog is powered by <a href="http://octopress.org">Octopress</a> and so far it has been great! Octopress is a ruby based static site generator that uses a simple templating system. I am using markdown for blog posts, HAML and HTML for static pages and SASS for styling. For comments, I am using Disqus since it can be added with a simple embed.</p>

<p>To deploy, I simply run a rake command to generate my site as static content and assets, then push it to GitHub. I don&#8217;t have to worry about databases, bandwidth or management. Easy.</p>
]]></content>
  </entry>
  
</feed>
